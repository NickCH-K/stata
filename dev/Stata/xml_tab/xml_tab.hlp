{smcl}
{* 14Feb2008 }{...}
{cmd:help xml_tab}{right: ({browse "http://www.stata-journal.com/article.html?article=dm0037":SJ8-3: dm0037})}
{hline}

{title:Title}

{p2colset 5 16 18 2}{...}
{p2col :{hi:xml_tab} {hline 2}}Save results in XML format{p_end}
{p2colreset}{...}


{title:Syntax}

{p 6 16 2}
{cmd:xml_tab} [{it:namelist}] [{cmd:,} {it:{help xml_tab##options:options}}]

{pstd}
where {it:namelist} is a list of stored estimations or matrices; see
{helpb estimates}. {it:namelist} comprises one or more specifications,
separated by spaces. A specification can be the name of a stored estimation or
a matrix name. {cmd:xml_tab} will output the estimation coefficients and one of
the three statistics (standard errors, t ratio, or p-values).

{pstd}
For estimation results, {cmd:xml_tab} has enough information to calculate
significance levels itself, but if a matrix is to be outputted, {cmd:xml_tab}
looks also for {it:matname}{cmd:_STARS}. The matrix must be the same size as
{it:matname} and contain values 0, 1, 2, or 3, denoting significance levels.
See option {helpb xml_tab##stars():stars()} for more details.

{pstd}{marker extended}{...}
The stored estimation also could be specified in an extended form with
parameters:

{p 6 16 2}
{cmd:xml_tab}
     [{it:estname1}{cmd:(}{it:stat11 stat12}{cmd:,} {it:eform_option}{cmd:)}
     [{it:estname2}{cmd:(}{it:stat21 stat22}{cmd:,} {it:eform_option}{cmd:)}
     [...]]] [{cmd:,} {it:{help xml_tab##options:options}}]

{pstd}
where {it:estname1} and {it:estname2} are names of stored estimations, and {it:stat11}, {it:stat12}, {it:stat21}, and {it:stat22} are matrices stored in
{cmd:e()}. Specification {it:estname}{cmd:(b V)} is identical to {it:estname}.
You can access the names of the stored matrices with {helpb ereturn list}. See
"Marginal effects" in {help xml_tab##exampleme:Examples}.

{pstd}
The extended-form specification is useful when accessing nonstandard
statistics, for example, when outputting marginal effects of the parameters
after, e.g., {helpb mfx} or {helpb dprobit}. The extended form also could be
used when outputting the results in exponentiated forms after commands such as
{helpb streg}, {helpb stcox}, {helpb st}, etc.

{pstd}
You can enclose {it:filename} in double quotes, and you must do so if
{it:filename} contains blanks or other special characters.


{marker options}{...}
{synoptset 27 tabbed}{...}
{synopthdr:options}
{synoptline}
{syntab:{help xml_tab##output:Output}}
{synopt:{opt save(filename)}}name and path for the output XML
               file/workbook{p_end}
{synopt:{opt replace}}overwrite existing {it:filename}{p_end}
{synopt:{opt append}}add a new sheet to the existing workbook,
               or create a new workbook {p_end}
{synopt:{opt sh:eet(name [, sh_opts])}}name a worksheet where the table
               is outputted{p_end}

{p2col 9 34 36 2:where {it:sh_opts} are}{p_end}
{p2col 10 34 36 2:{cmdab:col:or(}{it:#}{cmd:)}}specify tab color for a worksheet{p_end}
{p2col 10 34 36 2:{cmdab:nog:ridlines}}hide gridlines on a worksheet{p_end}


{synopt:{opt savem:at(name [, sm_opts])}}save estimates to a matrix{p_end}

{p2col 9 34 36 2:where {it:sm_opts} are}{p_end}
{p2col 10 34 36 2:{cmd:replace}}replace {it:name} if it exists; the
              default is to append{p_end}
{p2col 10 34 36 2:{cmd:exit}}exit {cmd:xml_tab} without creating an
               output file{p_end}

{synopt:{opt mv(mvspec)}}change missing values to string or numeric values{p_end}

{syntab:{help xml_tab##statistics:Statistics}}
{synopt:{opt sd}}show estimated coefficients and standard deviations; the default{p_end}
{synopt:{opt ts:tat}}show estimated coefficients and t statistics{p_end}
{synopt:{opt p:value}}show estimated coefficients and p-values{p_end}
{synopt:{opt stats(scalarlist)}}report {it:scalarlist} statistics at the bottom of the table{p_end}
{synopt:{opt star:s(starspec)}}control significance levels and symbols{p_end}
{synopt:{opt noadj:ust}}report unadjusted t statistics{p_end}
{synopt:{it:{help eform_option}}}display exponentiated coefficients{p_end}

{syntab:{help xml_tab##tablelayout:Table layout}}
{synopt:{opt b:elow}}show standard deviations (t statistics or p-values) under the estimates{p_end}
{synopt:{opt r:ight}}show standard deviations (t statistics or p-values) next to the estimates; the default{p_end}
{synopt:{opt nobr:ackets}}remove brackets around standard deviations (t statistics or p-values) if {cmd:below} is specified{p_end}
{synopt:{opt lo:ng}}long output table style{p_end}
{synopt:{opt wi:de}}wide output table style; the default{p_end}
{synopt:{opt keep(keeplist)}}report {it:keeplist} rows{p_end}
{synopt:{opt drop(droplist)}}drop {it:droplist} rows from the table{p_end}
{synopt:{opt eq:uations(matchlist)}}match the equations of the models according to {it:matchlist}{p_end}

{syntab:{help xml_tab##tableformating:Table formatting}}
{synopt:{opt f:ormat(flist)}}define the format of the output table{p_end}
{synopt:{opt l:ines(llist)}}underline rows{p_end}
{synopt:{opt nol:abel}}display variable names instead of labels{p_end}
{synopt:{opt c:onstant(string)}}specify label for the constant{p_end}
{synopt:{opt rb:lanks(rblist)}}add rows to the table{p_end}
{synopt:{cmdab:cb:lanks(}{cmdab:e:quations}|{it:numlist}{cmd:)}}add blank columns to the table{p_end}
{synopt:{opth cw:idth(xml_tab##cwidth:width)}}modify column widths{p_end}
{synopt:{opt tb:lanks(#)}}add {it:#} blank rows at the top of the table{p_end}
{synopt:{opt t:itle(string)}}title the table{p_end}
{synopt:{opt rn:ames(strlist)}}define custom row names{p_end}
{synopt:{opt cn:ames(strlist)}}define custom column names{p_end}
{synopt:{opt ce:q(strlist)}}define custom column equation names (supertitles){p_end}
{synopt:{opt note:s(string)}}add notes to the end of the table{p_end}
{synopt:{opt fon:t(string)}}specify font for a worksheet{p_end}
{synopt:{opt sty:le(stylename)}}apply predefined formatting styles to the table{p_end}

{syntab:{help xml_tab##system:System}}
{synopt:{opt ex:celpath(filename)}}specify the location of the Excel executable{p_end}
{synopt:{opt ca:lcpath(filename)}}specify the location of the Calc executable{p_end}
{synopt:{opt noi:sily}}display the complete list of options applied to the table{p_end}
{synopt:{opt updateopts}}update the options file{p_end}
{p2line}
{p2colreset}{...}


{title:Description}

{pstd}
{cmd:xml_tab} saves Stata output directly into an XML file that can be opened
with Microsoft Excel or OpenOffice Calc. The program is relatively
flexible and produces print-ready tables in Excel or Calc.  {cmd:xml_tab}
allows users to apply different formats to the elements of the output table and
essentially do everything Excel or Calc can do for formatting from
within Stata.

{pstd}
{cmd:xml_tab} creates formatted tables of coefficients, standard errors, t
statistics, p-values, summary statistics, etc., after any Stata estimation
command that saves its results in {cmd:e()}. The program allows saving the
results of a single estimation or a matrix into a table, combining several
stored estimations or matrices into one table, and outputting several tables
into the different sheets of an XML workbook.

{pstd}
Calling {cmd:xml_tab} without any arguments saves the results of the last
estimation command into the file {cmd:stata_out.xml}, located in the current
working directory. After the XML file is saved, {cmd:xml_tab} can create links
in the Stata Results window. Clicking on a link opens the output table in Excel
or Calc.  See {help xml_tab##system:System} for details.

{pstd}
{cmd:xml_tab} combines multiple estimations saved by using the
{helpb estimates store} command. An example of outputting multiple estimates
into one table might look as follows:

{phang2}{opt . sysuse auto}{p_end}
{phang2}{opt . regress price rep77 length mpg}{p_end}
{phang2}{opt . estimates store reg1}{p_end}
{phang2}{opt . regress price rep77 length mpg turn if foreign==1}{p_end}
{phang2}{opt . estimates store reg2}{p_end}
{phang2}{opt . xml_tab reg1 reg2}{p_end}

{pstd}
In this example, the estimates from the first regression are saved under the
name {cmd:reg1}. The specification of the second regression contains one extra
variable, and the sample for the estimation is constrained.  The estimates from
the second regression are saved under the name {cmd:reg2}. {cmd:xml_tab}
creates an output table containing five columns. The first column contains the
names of the variables used in either regression. The second and fourth
columns contain the estimated coefficients of the first and second regressions,
and the third and fifth columns contain the standard errors of the coefficients
of the first and second regressions.

{pstd}
{cmd:xml_tab} has many additional options to control the outputted statistics,
formatting, and general layout of the output tables. Please read the
description of these options below, and look at the examples.


{title:Options}

{marker output}{...}
{dlgtab:Output}

{phang} 
{opt save(filename)} specifies a name for the XML file where the tables are
outputted. If {opt save(filename)} is omitted, the output will be saved in
{cmd:stata_out.xml} located in the current working directory. Use the
{opt replace} and {opt append} options to instruct {cmd:xml_tab} 
 to replace the existing file or to append a table into the new worksheet of
the existing file.

{pmore}
Alternatively, the output filename can be specified with the {opt using}
syntax. Instead of {opt save()}, you can type

{p 12 20 2}{cmd: . xml_tab using c:\tmp\xml_out.xml, *} {p_end}

{pmore}Note: You need to close the XML file if it is open in Excel or Calc for
{cmd:xml_tab} to save the new tables there. If the XML file is still open,
{cmd:xml_tab} reports an error message:
{err: file cannot be saved at this location}.

{phang}
{opt replace} permits you to overwrite the existing XML file.

{phang}
{opt append} adds a new sheet, if an XML file already exists, and saves the
output table in the new sheet.  Otherwise, {opt append} creates a new file
containing one sheet with the output.

{phang}
{opt sheet(name [, sh_opts])} outputs several tables into the different sheets
of the XML file (workbook). Excel or Calc files could contain multiple
worksheets within a single document (workbook). The {cmd:sheet()} option
specifies the name for the new sheet where the table will be outputted. If this
is not specified, a worksheet named Sheet1 will be added. Valid
{it:sh_opts} are {opt color(#)}, which specifies the tab color for a worksheet,
and {opt nogridlines}, which suppresses gridlines on a worksheet. The default
in Excel is to display gridlines. This option affects only the on-screen
appearance; these lines are not printed.

{pmore}
A valid Excel worksheet name must have no more than 31 characters. The
worksheet name cannot contain :, \, /, ?, *, [, or ] and cannot be left
blank.

{phang}
{opt savemat(name [, sm_opts])} saves estimation results in a matrix. If
{it:name} exists and option {opt replace} was not used, then additional rows
will be appended to that matrix. In this case, the number of columns in the
existing matrix and the one to be appended must be the same. The output matrix
will contain estimates and standard errors (t statistics, p-values) in a form
determined by {help xml_tab##tablelayout:table layout} options. Significance
level info will be saved/appended to matrix {it:matname}{cmd:_STARS}; see
"Exporting a matrix" in {help xml_tab##matrices:Examples}. Valid {it:sm_opts}
are {opt replace}, which replaces {it:name} if it exists, and {opt exit}, which
exits {cmd:xml_tab} without creating an output file.

{phang}
{cmd:mv(}{it:#}|{it:mvc}{cmd:=}{it:#} [{bind:{cmd:\} {it:mvc}{cmd:=}{it:#}}...]
[{cmd:\} {opt else=}{it:#}]{cmd:)} specifies the new values, either numeric
({it:#}) or string ({it:str}), to which the missing values are to be changed.

{pmore}
{opt mv(str)} specifies that all types of missing values be changed to {it:str}.

{pmore}
{opt mv(mvc=str)} specifies that occurrences of missing-value code {it:mvc} be
changed to {it:str}.  Multiple transformation rules may be specified, separated
by a backward slash, {cmd:\}.  The list may be terminated by the special rule
{opt else=}{it:str}, specifying that all types of missing values not yet
transformed be set to {it:str}.

{pmore}
For example, {cmd:mv("")}, {cmd:mv(.n="N.A." \ .d="(dropped)" \ else="")}

{pmore}
See {manhelp mvencode D} for more information.

{marker statistics}{...}
{dlgtab:Statistics}

{phang}
{opt sd}, {opt tstat}, and {opt pvalue} control which statistic will be
outputted together with the estimated coefficients.  If option {opt sd} is
specified, the standard errors of the estimated coefficients are outputted.
Specifying {opt tstat} produces a table of coefficients and the t statistics.
{opt pvalues} outputs the probability that the true value of the estimated
coefficient is zero.

{pmore}
Only one option can be specified. If no options are specified, the standard
deviations are outputted.

{phang} {* STATS *}
{opt stats(scalarlist)} specifies one or more statistics (scalars) to be
displayed in the table. The statistics specified in {opt stats} are outputted
at the end of the table and could be the number of observations,
{cmd:stats(N)}; adjusted R2 for a regression, {cmd:stats(r2_a)}; value of log
likelihood, {cmd:stats(ll)}; and any statistics that are saved in {opt e()}
scalars after estimation routines. See {helpb ereturn}.

{pmore}
In addition, {it:scalarlist} may contain the following statistics:

{p 12 20 2}{opt aic}{space 9}Akaike's information criterion{p_end}
{p 12 20 2}{opt bic}{space 9}Bayesian's information criterion{p_end}
{p 12 20 2}{opt rank}{space 8}rank of {cmd:e(V)} -- number of free parameters in model{p_end}
{p2colreset}{...}

{pmore}
If several estimations are combined in one table, the specified statistics will
be displayed for each estimation.

{marker stars()}{...}
{phang}
{opt stars(starspec)} specifies the significance level(s) and the symbol(s) for
the coefficients to be marked in the output table. The simple syntax for
{it:starspec} may contain up to three numbers, separated by spaces,
corresponding to significance levels denoted by one, two, and three stars. If
the numlist is just one number, the coefficients with p-values less than that
number will be marked by a star. For example, {cmd:stars(0.1)} will mark
with one star all the coefficients with p-values less than 0.1. If two values
are specified in the numlist, {cmd:xml_tab} will mark with one star the
coefficients with p-values that are less than or equal to the first value and
greater than the second value. Coefficients with p-values less than or equal to
the second value will be marked by two stars. For example, specifying
{cmd:stars(0.1 0.05)} will put one star on coefficients with p-values in the
range from 0.1 to 0.05 and put two stars on the coefficients with p-values less
than or equal to 0.05.

{pmore}The extended syntax allows selecting the symbols to mark the
significance levels. In this case, {it:starspec} consists of up to three
symbol/number pairs. The symbol could, by one or several characters and the
number, indicate the significance level similar to the simple syntax described
above.

{pmore}
By default, {cmd:xml_tab} outputs tables with the following {opt stars()}
specification: {cmd:stars(0.1 0.05 0.01)}.  Alternatively, this option could be
specified in the extended syntax as {cmd:stars(* 0.1 ** 0.05 *** 0.01)}. Any
symbol or a combination of several symbols could be used instead of * in this
specification. Specifying 0 in the numlist would suppress stars on the table:
{cmd:stars(0)}.

{phang}
{opt noadjust} is used when outputting some transformations of the estimated
coefficients (i.e., marginal effects). By default, {cmd:xml_tab} calculates t
statistics as f(b)/sd_f(b). But if {opt noadjust} is specified, then
t-stat=b/sd_b will be reported and used for p-values and significance
calculations.

{phang}
{it:eform_option} reports the coefficients and the standard errors (t
statistics and p-values) in exponentiated form for all estimation results.
The following {it:eform_option}s are available: {cmd:eform}, {cmd:hr},
{cmdab:ir:r}, {cmd:or}, and {cmdab:rr:r}.

{pmore}
To transform only some of the estimation results, the
{help xml_tab##extended:extended syntax} can be used. For example,

{p 12 20 2}{cmd:. xml_tab reg streg(, hr) prob, replace}

{pmore}outputs unmodified coefficients and standard errors for estimations
{cmd:reg} and {cmd:prob}, but outputs exponentiated (hazard ratio) coefficients
and modified standard errors for the estimation {cmd:streg} (displaying 'Haz
Ratio' as a title).

{pmore}
See {manhelpi eform_option SVY} for additional information.

{marker tablelayout}{...}
{dlgtab:Table layout}

{phang}
{opt below} and {opt right} control whether the standard deviations, t
statistics, or p-values (see the
{helpb xml_tab##statistics:sd}, {helpb xml_tab##statistics:tstat}, and
{helpb xml_tab##statistics:pvalue} options) will be placed to the right of or
below the coefficients. {opt right} is used by default.

{pmore} For example, if {opt right} is specified, the element of the output
table will look like the following:{p_end}

{p 13 20 2}{bf: 0.123 {it:0.456}}{p_end}

{pmore} If {opt below} is specified, the element of the output table will look
like the following:{p_end}

{p 13 20 2}{bf:0.123}{p_end}
{p 12 20 2}{it:(0.456)}{p_end}

{phang}
{opt nobrackets} removes the brackets around standard deviations (t statistics
or p-values), which is the default format when {opt below} is used.

{phang}
{opt long} and {opt wide} produce a "long version" or a "wide version" of the
output table. {opt wide} specifies that the individual equations from
multiple-equation models (e.g., {cmd: mlogit}, {cmd: biprobit}, {cmd: heckman})
be placed in separate columns.  Summary statistics will be reported under
the first equation if {opt wide} is specified. This is the default option.

{pmore}
For example, if a dependent variable with three categories is fitted with
{cmd:mlogit} using 10 exogenous variables, then specifying option {opt wide}
would result in a 12 x 5 table. The first column of this table contains
variable labels/names, the second and third columns contain the estimated
coefficients and standard error for the first equation, and the fourth and
fifth columns contain the estimated coefficients and standard error for the
second equation.

{pmore}
Alternatively, specifying option {opt long} places the equations of the
multiple-equation estimation below one another in a single column.

{phang}
{opt keep(keeplist)} specifies the coefficients (and their order) to be
included in the table. {it:keeplist} comprises one or more specifications,
separated by a space: a variable name (e.g., {cmd:price}), an equation name
followed by a colon (e.g., {cmd:mean:}), or a full name (e.g.,
{cmd:mean:price}).

{pmore} Using {opt keep()} in a multiple equation or in multiple-estimation
tables would output only variables specified in the {it:keeplist}. If some of
the equations/estimations contain no variables in the {it:keeplist}, these
equations will not be outputted.

{pmore} If you want to keep some variables only in selected equations, make
sure you specify the correct names for the equations. {cmd:xml_tab} uses the
name of a dependent variable as an equation name. {opt keep()} will output
statistics for the variables in {it:keeplist} in all estimations/equations with
identical names (same dependent variable).

{phang}
{opt drop(droplist)} identifies the coefficients to be dropped from the table.
{it:droplist} comprises one or more specifications, separated by spaces. A
specification can be either a variable name (e.g., {cmd:price}), an equation
name followed by a colon (e.g., {cmd:mean:}), or a full name (e.g.,
{cmd:mean:price}).

{pmore}
The {opt drop()} option could be useful if a user wants to suppress the
output of coefficients for some variables. For example, if the empirical
specification includes several regional dummies, one might want to create the
output tables without the coefficients on these dummies. If regional dummies
are named {cmd:reg1}, ..., {cmd:reg12}, then specifying {cmd:drop(reg*)} will
suppress the output of the coefficients on these dummies in the table.

{pmore}
In multiple-equation estimations (e.g., {helpb heckman},
{helpb heckprobit}), sometimes you might want to suppress the output of the
coefficients for the first-stage equation. This can be done by specifying
{cmd:drop(select:)}, where {cmd:select} is the name of the first-stage
equation. See more examples of using {opt drop()} in
{help xml_tab##exampledk:Examples}.

{pmore}
The characters {cmd:*} and {cmd:?} can be used for variable names in
{it:keeplist} and {it:droplist}. The {cmd:*} character indicates matching one
or more characters, and the {cmd:?} character matches a single character. All
variables matching the pattern will be included in the lists.  For example, 
consider the following:

{p 8 20 2}{cmd:. xml_tab, drop(region_*)}{p_end}
{p 8 20 2}{cmd:. xml_tab, drop(region_?)}{p_end}

{pmore}In this example, the first command will suppress the output of
coefficients for variables {cmd:region_1}-{cmd:region_15}, but the second one
will just suppress the output of coefficients for {cmd:region_1}-{cmd:region_9},
because only the single digit (character) was allowed by {cmd:?}.

{pmore}
If both {cmd:keep()} and {cmd:drop()} are specified, {cmd:keep()} will be
applied first.

{phang}
{opt equations(matchlist)} specifies how the equations of the models in
{it:matchlist} are to be matched.

{pstd}{cmd:keep()}, {cmd:drop()}, and {cmd:equations()} work like the options
documented in {manhelp estimates_table R:estimates table}.

{marker tableformating}{...}
{dlgtab:Table formatting}

{phang}
{opt format(flist)} specifies a list containing the formatting information for
each cell of an XML table. The format of each cell is defined by a formatting
string. A formatting string consists of five alphanumeric symbols in the order
specified below:

{p 10 12 2}Cell type: (S|s) - string, (N|n) - numeric{p_end}

{p 10 12 2}Vertical alignment: (T|t|1) - Top , (C|c|2) - Center, (B|b|3) - Bottom{p_end}

{p 10 12 2}Horizontal alignment: (L|l|1) - Left, (C|c|2) - Center, (R|r|3) - Right{p_end}

{p 10 12 2}Font style: (R|r|0) - Regular, (B|b|1)- Bold, (I|i|2) - Italic, (O|o|3) - Bold Italic, (U|u|4) - Underline{p_end}

{p 10 12 2}Decimal places: 0-9, defining number of digits after the decimal{p_end}

{pmore}The order of codes in the formatting string is important. The formatting
string can contain a mixture of alphanumeric symbols. Uppercase and lowercase
characters and numerical codes can be used interchangeably. For example, a
formatting string can look like N2210, NCCI2, nT1R0, sccb0, etc.

{pmore}The formatting for a table of size (n x m) is described as a list of
codes for the table's columns. That list has a form:

{pmore}((F_11 F_12...F_1n) (F_21 F_22...F_2n) ... (F_m1 F_m2...F_mn))

{pmore} Format lists for the different columns are enclosed in parentheses and
separated by a space. The first format list, (F_11 F_12...F_1n), defines the
format for the row names (e.g., variable names). The list (F_k1 F_k2...F_kn)
describes the formatting of the cells of the kth column; the F_k1 defines the
format for the kth column's header (e.g., coef, se).

{pmore}
If the dimensions of the formatting list are smaller than the dimensions of the
output table, the formatting will be extended for the remaining rows/columns.
If just one formatting code is specified, as in {cmd:format((S2110))} (string,
centered vertically, left-justified, in bold, with 0 decimal places), that
format will be applied to each cell of the output table (including variable
names and column headers). If two codes are specified, as in
{cmd:format((S2110) (N2230))}, the column with variables names will be
formatted using the S2110 format, and all other columns in the table will be
formatted with N2230. Specifying three codes, as in
{cmd:format((S2110) (NCCI0) (N2211))}, will apply format S2110 to the column
of variable names, format NCCI0 to all odd numerical columns, and format N2211
to all even numerical columns of the table.

{pmore}Similarly, if k + 1 formatting codes are specified, then the first
format will be applied to the column of the variable/row names, and remaining k
formats will be applied repeatedly to every group of k columns of the table.
By specifying more than one formatting code for a column, you can control the
formatting of every cell in a column.

{pmore}Analogously to the extension rule for the column formats, the first code
of the list will be applied to the column header, and the next codes will be
used repeatedly for the cells of a column. For example,
{cmd:format((S2110) (SCCB0 N2302 N2322))} outputs the variable names with
format S2110, the headers for each numerical column with format SCCB0,
every odd row with format N2302 (right-justified with 2 decimals), and every
even row with N2322 (italic with 2 decimals).

{pmore}See {opt styles()} for an alternative way of specifying the formatting
of the output table.

{phang}
{opt lines(llist)} will draw the bottom border line in the cells with the
listed variables. {it:llist} is a list of paired parameters. The first
parameter specifies the variable name (or row number), and the second parameter
specifies a line style.  The line style can be a number from 0 to 13, which
corresponds to the line styles defined below. 

{synoptset 14}{...}
{synopthdr:     line #}
{synoptline}
{synopt:{space 8}{opt 0}}None{p_end}
{synopt:{space 8}{opt 1}}Continuous hairline{p_end}
{synopt:{space 8}{opt 2}}Continuous thin{p_end}
{synopt:{space 8}{opt 3}}Continuous medium{p_end}
{synopt:{space 8}{opt 4}}Continuous thick{p_end}
{synopt:{space 8}{opt 5}}Dot thin{p_end}
{synopt:{space 8}{opt 6}}DashDotDot thin{p_end}
{synopt:{space 8}{opt 7}}DashDotDot medium{p_end}
{synopt:{space 8}{opt 8}}DashDot thin{p_end}
{synopt:{space 8}{opt 9}}DashDot medium{p_end}
{synopt:{space 8}{opt 10}}Dash thin{p_end}
{synopt:{space 8}{opt 11}}Dash medium{p_end}
{synopt:{space 8}{opt 12}}SlantDashDot thin{p_end}
{synopt:{space 8}{opt 13}}Double thick{p_end}
{synoptline}
{p2colreset}{...}

{pmore}
Instead of specifying a variable name, specify {cmd:SCOL_NAMES} to draw a line
under the equation names; {cmd:COL_NAMES} to draw a line under the statistic
titles (the top row); {cmd:EST_NAMES} to draw a line under the row containing
estimate names; or {cmd:LAST_ROW} to draw a line under the last row of the
table.

{pmore}
For example, {cmd:lines(COL_NAMES 1 turn 1 LAST_ROW 13)} draws a single line
under the captions (e.g., coef, se), a single line under the variable
{cmd:turn}, and a double line under the last row of the table.

{phang}
{opt nolabel} displays, by default, variable labels as row names in the output
table. If {opt nolabel} is specified, variable names will be displayed in the
output table. This option is ignored when outputting matrices.

{phang}
{opt constant(string)} controls the label for the constant term. The default in
Stata is {cmd:_cons}, but if specified, {it:string} will be displayed instead.

{phang}
{opt rblanks(rblist)} inserts an empty row or text after the specified rows
({it:rblist}) in the output table. For each inserted row, {cmd:xml_tab}
expects a variable name, {it:varname}, after which an empty row or text should
be added; the text itself, {it:text}; and a format for the new cell,
{it:format}.  Multiple rows are separated by a comma. Also see
{helpb xml_tab##tableformating:format()}.

{pmore} For example, {cmd:rblanks(turn "this text after turn" S2210,}
{cmd:headroom "and this one below headroom")} will add vertically and
horizontally centered "{cmd:this text after turn}" below the data row for the
variable {cmd:turn} (if found) and "{cmd:and this one below headroom}" after
the variable {cmd:headroom} using the same format as used for {cmd:headroom}.

{pmore}
Instead of specifying a variable name, specify {cmd:SCOL_NAMES} to add a row
under the equation names; {cmd:COL_NAMES} to add a row under the statistic
titles (the top row); {cmd:EST_NAMES} to add a row under the row containing
estimate names; or {cmd:LAST_ROW} to add a row under the last row of the
table.

{phang}
{cmd:cblanks(}{cmd:equations}|{it:numlist}{cmd:)} inserts an empty column after
each column specified in {it:numlist}. The numbering of the numeric columns in
the output table starts from 1. For example, {cmd:cblanks(2 4)} inserts an
empty column after the second and the fourth columns of the output table. The
column with the row names is number 1. If keyword {cmd:equations} is used, then
a blank column will be added after every equation (group of columns having the
same column equation value).

{marker cwidth}{...}
{phang}
{opt cwidth(width)} controls the column widths in an Excel worksheet.
{it:width} is a list of paired parameters.  The first parameter specifies the
column number (0 being the column of row names) or the keyword
{cmdab:e:quations}, and the second parameter specifies a column width. You can
specify a column width of 0 to 255.  This value represents the number of
characters that can be displayed in a cell that is formatted with the standard
font. If the column width is set to 0, the column is hidden. {opt cwidth()} is
evaluated after the {opt cblanks()} option, so additional blank columns (if
any) should be taken into consideration when determining column numbering.

{phang}
{opt tblanks(#)} inserts {it:#} rows at the beginning of an Excel sheet. The
output table shifts down by {it:#} rows.

{phang}
{opt title(string)} specifies the title for the table. {it:string} is
inserted at the top of the table. For example,

{p 8 20 2}{cmd:. xml_tab *, title("Table 1.1")}{p_end}

{phang}
{opt rnames(strlist)}, {opt cnames(strlist)}, and {opt ceq(strlist)} modify
default row/column names and column equation names (supertitles) for the
output matrix/estimation result. {it:strlist} should contain as many words as
there are rows/columns in the output. To specify a name containing spaces,
include it in quotes. Table layout options {opt long}, {opt below},
{opt keep()}, and {opt drop()}, and table formatting options {opt rblanks()}
and {opt cblanks()} will be applied before {opt rnames()}, {opt cnames()},
and {opt ceq()}.

{phang}
{opt notes(string)} adds one or more lines of text at the end of the table.
Lines are separated by commas. If the first word (after the comma) of a line
specification is numeric then, the note will be shifted down by {it:#} rows;
otherwise, it will be written in the line immediately after the previous output
row.

{phang}
{opt font(font)}, where {it:font} is {it:fontname} [{it:fontsize}], specifies
the font for the output table in a particular sheet of the workbook. The
{it:fontname} is a font name enclosed in quotes; an optional argument,
{it:fontsize}, is the size of the font.  For example,

{p 8 20 2}{cmd:. xml_tab *, font("Arial Narrow" 12)}{p_end}

{pmore}If {opt font()} is not specified, the default font is used. When a new
sheet is added to the existing workbook and {opt font(font)} is specified, that
{it:font} will be applied only to the table in this new sheet. Each sheet
in the workbook can use different fonts.

{phang}
{opt style(stylename)} specifies layouts and formatting for the output table
from a predefined list of styles. These predefined styles are stored in
{cmd:xml_tab_options.txt}. If the file is missing, then it will be re-created.
There are several preset styles, for example, default, S1 and S2. User-defined styles can be
added to the file. If neither {cmd:style} nor {cmd:format} is specified, the
program creates output with {cmd:style(}default{cmd:)}.

{pmore} {opt styles} in {cmd:xml_tab} are just sets of options that are written
in the file {cmd:xml_tab_options.txt}, which is located in the directory where
{cmd:xml_tab} is installed. Each {opt style} is recorded on a separate line.
You can define your own styles by modifying the file {cmd:xml_tab_options.txt}.
The syntax for the styles consists of the style name, an equal-sign, and a set
of options corresponding to that particular style. To create a style, add a new
line in the file {cmd:xml_tab_options.txt}, and define your style. For example,

{p 8 20 2}{cmd:MYTABLES=sd right replace wide font("Arial Narrow" 12) sheet("Table 1")}{p_end}

{pmore}You can instruct {cmd:xml_tab} to use this style by specifying the
following:

{p 8 20 2}{cmd:xml_tab *, style(mytables)}{p_end}

{pmore}This command will create a table using the set of options defined in
{opt style(mytables)}. In other words, the previous command is equivalent to
the following:

{p 8 20 2}{cmd:xml_tab *, sd right replace wide font("Arial Narrow" 12) sheet("Table 1")}{p_end}

{pmore}User-specified options supersede any options defined in {opt style()}.
You can check the complete set of options associated with a particular style by
using the {opt noisily} option.

{marker system}{...}
{dlgtab:System}

{phang}
{opt excelpath(filename)} and {opt calcpath(filename)} tell {cmd:xml_tab} where
to find Excel and/or Calc executables. For example,

{p 8 20 2}{cmd:. xml_tab, excelpath("D:\My programs\MS Excel\excel.exe")}{p_end}

{p 8 20 2}{cmd:. xml_tab, calcpath("D:\My programs\OpenOffice.org\scalc.exe")}{p_end}

{phang}
{opt noisily} displays the complete list of options applied to the table. This
option could be useful when using {opt style()} to see all options
associated with a particular style.

{phang}
{opt updateopts} is used to re-create the options file. If
{cmd:xml_tab_options.txt} is missing, then it will be created automatically;
otherwise, {cmd:updateopts} can be specified to overwrite the existing options
file with the one containing the default styles.


{title:Remarks}

{pstd}
{cmd:xml_tab} is designed for Stata 8.0 and later. The XML files
generated by {cmd:xml_tab} could be opened with Excel 2003, Calc 2.0, or later
versions of each under Windows OS. It might be possible to open
XML files with Excel 2002. The XML format is not supported by Excel 2000 and
earlier.

{pstd}
We have not tested the compatibility of XML output generated by {cmd:xml_tab}
with Calc or Excel running under Macintosh, UNIX, or Linux OS. We would be
thankful for the comments about any problems users encounter when using
{cmd:xml_tab} in Stata on these platforms.

{pstd}
{cmd:xml_tab} will try to locate either Excel or Calc on your computer and, if
found, will create a link in the Results window. Clicking on this link will
automatically open the output. You can explicitly specify where {cmd:xml_tab}
should look for Excel or Calc if the programs are not installed in their
default locations (you will need to do it just once). If neither of the two
programs are found or if Stata runs in "console" or "batch" modes, no link will
be created, but {cmd:xml_tab} will still generate the output file.


{title:Examples}

    {title:Introduction}

{pstd}
In all of our examples, we use stored estimates and matrices defined by the code below:

{phang2}{cmd:. sysuse auto, clear}{p_end}
{phang2}{cmd:. regress price mpg headroom trunk      if foreign==0}{p_end}
{phang2}{cmd:. estimates store reg1}{p_end}
{phang2}{cmd:. regress price mpg headroom trunk turn if foreign==1}{p_end}
{phang2}{cmd:. estimates store reg2, title(Only foreign cars)}{p_end}
{phang2}{cmd:. heckman mpg weight length, sel(foreign = length displ) nolog}{p_end}
{phang2}{cmd:. estimates store heck1, title(Selection model)}{p_end}

{pstd}
In the above code, we use the dataset {cmd:auto.dta}. We run a regression and
save the results of this regression into the stored estimate {cmd:reg1}. We
then run another regression with a different specification and save the results
in the estimate {cmd:reg2}, giving this estimate a title. Then we fit the 
{cmd:heckman} selection model. We store the estimates from this model to
{cmd:heck1}.


    {title:Basic syntax}

{phang2}{cmd:. xml_tab reg1 reg2, replace stats(r2_a) title("price regressions by car type")}{p_end}

{pstd}
In this example, {cmd:xml_tab} merges the estimates of two regressions,
{cmd:reg1} and {cmd:reg2}, forming a table with five columns. The first column
contains the variable names; the second column contains the estimated
coefficients from the first regression; the third column contains the standard
errors for the coefficients from the first regression; the fourth column
contains the estimated coefficients from the second regression; and the
fifth column contains the standard errors for the coefficients from the second
regression.

{pstd}
In addition to the coefficients and standard errors, {cmd:xml_tab} also outputs
the adjusted R2 for each regression at the bottom of the output table (option
{cmd:stat(r2_a)}. With option {cmd:title("price regressions by car type")},
{cmd:xml_tab} is instructed to place the text
{cmd:price regressions by car type} at the top of output table. The numerical
values in the table are formatted with a default format: both the coefficients
and the standard errors have three decimal places, but standard errors are
placed to the right of the coefficients and italicized.

{pstd}
The table is outputted into the file {cmd:stata_out.xml}, which is  located in
the current Stata directory.

{phang}
{it:Extensions:} options {cmd:save()}, {cmd:tstat}, {cmd:below},  and {cmd:sheet()}

{phang2}{cmd:. xml_tab reg1 reg2, save("c:\my documents\table1") tstat below sheet("Table 2") stats(N r2_a)}{p_end}

{pstd}{opt save()} saves the XML file as {cmd:c:\my documents\table1.xml}. The
output table is placed in a sheet of the XML workbook with the name
{cmd:Table 2}. Specifying {opt tstat} outputs the estimation coefficients and
the corresponding t statistics. Option {opt below} places t statistics in
parentheses under the coefficients.

{marker exampledk}{...}
{phang} 
{it:Extensions:} options {cmd:append} and {cmd:drop()}/{cmd:keep()}

{phang2}{cmd:. xml_tab heck1 using "c:\my documents\table1", pvalue right drop(length) sheet("Heckman") stats(ll)}
{cmd: append}{p_end}

{pstd}
This command saves the estimation results from {helpb heckman}.  Option
{cmd:drop(length)} suppresses the output of the estimated coefficient for
{cmd:length}.  {cmd:stats(ll)} reports the log-likelihood value for the system
at the bottom of the table.  Option {opt append} adds a new sheet,
{cmd:Heckman}, to the XML file used in the previous example and outputs the
estimated coefficients and p-values for the binary and continuous parts of the
maximum-likelihood (ML) Heckman estimation to it. 

{pstd}
To suppress the output of the binary part of the ML Heckman estimation (loosely
speaking, to supersede the output of the first-stage equation), we would insert
the equation name as a parameter: {cmd:drop(foreign)}.

{phang}
{it:Extensions:} option {cmd:long}/{cmd:wide}

{pstd}
By default, {cmd:xml_tab} outputs the results of multiple-equation estimations
into separate columns for each equation.  For example, the table formed in the
last example consists of five columns: one column with the variable names, two
columns with the coefficients and p-values from the first-stage equation, and
two columns with the second-stage equation estimates. To output the
coefficients from both equations into one column, specify option {opt long}:

{phang2}{cmd:. xml_tab heck1 using "c:\my documents\table1", long pvalue right sheet("Heckman_long") stats(ll)}
{cmd: append}{p_end}

{pstd}
The code above will keep the two previous tables saved in sheets {cmd:Table 1}
and {cmd:Heckman} in the file {cmd:c:\my documents\table1}. {cmd:xml_tab} will
add a new sheet, {cmd:Heckman_long}, to the workbook and output the results in
long format into this sheet.


    {title:Print-ready tables}

{pstd}
{cmd:xml_tab} allows you to create print-ready tables from within Stata.
Several options control the look of the output table.

{pstd}
Subcategories of variables could be conveniently separated by using the
{opt rblanks()} option. The example below inserts an empty row after variable
{cmd:mpg} and puts a heading, in italics, into this row:

{phang2}{cmd:. xml_tab reg1 reg2, replace stats(r2_a) rblanks(mpg "Interior Dimensions" S2220)}{p_end}

{pstd}
To separate the results of the two regressions, use option {opt cblanks()},
which inserts an empty column after the columns specified as an argument of
this option. The code below inserts an empty column after the third column
(standard errors of the first regression).

{phang2}{cmd:. xml_tab reg1 reg2, replace stats(r2_a) cblanks(3)}{p_end}

{pstd}
Option {opt line()} allows you to underline rows of the table. To underline the
last row of the output table with a double line, use the following syntax:

{phang2}{cmd:. xml_tab reg1 reg2, replace stats(r2_a) line(LAST_ROW 13)}{p_end}

{pstd}
To underline the row with coefficient {cmd:mpg} with a single line and to
underline the last row of the table with a double line, use the following
syntax:

{phang2}{cmd:. xml_tab reg1 reg2, replace stats(r2_a) line(LAST_ROW 13 mpg 1)}{p_end}


{marker exampleme}{...}
    {title:Marginal effects}

{pstd}
You have to use a nonstandard specification to create tables of
marginal effects, elasticities, and other statistics generated by {helpb mfx},
{helpb dprobit}, and {helpb dlogit}. Suppose we want to generate a table of
marginal effects after {helpb heckman} estimation.

{phang2}{cmd:. heckman mpg weight length, sel(foreign = length displ) nolog}{p_end}
{phang2}{cmd:. mfx, predict(xb)}{p_end}
{phang2}{cmd:. estimates store heck_mfx, title(Heckman marginals)}{p_end}

{pstd}
Now, if we want to output, for example, the marginal effects from this
estimation, we type

{phang2}{cmd:. xml_tab heck_mfx(Xmfx_dydx Xmfx_se_dydx), replace}{p_end}

{pstd}
To output the marginal effects and the standard errors after {helpb dprobit},
you would specify ({it:dfdx se_dfdx}) statistics.

{pstd}
We specify the names of matrices with corresponding statistics in parentheses
with the name of the stored estimates. You can check the names of the matrices
with stored statistics by using {helpb ereturn list}.


{marker matrices}{...}
    {title:Exporting a matrix}

{pstd}
{cmd:xml_tab} can also output any matrix in Stata memory. You can apply most of
the options of {cmd:xml_tab} to control the layout and the formatting of the
matrix output. You can create custom tables by forming the matrices of the
results and outputting them with {cmd:xml_tab}. {helpb tabstatmat} is a useful
command to save various summary statistics into matrices. The example below
outputs matrix {cmd:M} with a custom format into the default XML file:

{phang2}{cmd:. matrix M = 1, 2 \ 3, 4}{p_end}
{phang2}{cmd:. matrix M_STARS = 0, 2 \ 3, 1}{p_end}
{phang2}{cmd:. xml_tab M, format((S2210, S2100, S2100), (S2210, N2301, N2301), (S2230, N2321, N2321))}{p_end}

{pstd}Because matrix {cmd:M_STARS} exists, the output table will contain
significance stars based on default levels and symbols. Thus the output table
will have the following form:

	  {tab}   {bf:c1}{tab}   {bf:c2}
	r1{tab}  1.0{tab}  2.1**
	r2{tab}  3.0*{tab}  4.1***

{pstd}
Another example demonstrates how to create and output a simple table of means:

{phang2}{cmd:. tabstat price mpg rep78 headroom trunk weight length, by(foreign) save}{p_end}
{phang2}{cmd:. tabstatmat A}{p_end}
{phang2}{cmd:. matrix TAB=A'}{p_end}

{phang2}{cmd:. xml_tab TAB, replace}{p_end}

{pstd}{cmd:tabstat} generates a table of means for the list of variables,
categorized by {opt foreign}. {cmd:tabstatmat} saves the results to matrix A.
This matrix has three rows: Domestic, Foreign, and Total. In the columns of
matrix A are the means for the listed variables. We save the transpose matrix A
into another matrix, TAB. {cmd:xml_tab} outputs the matrix into the default XML
file.

{pstd}You can see more examples of ways to use {cmd:xml_tab} in
{opt xml_tab_example.do}.


{title:Authors}

{phang}Zurab Sajaia, zsajaia@worldbank.org

{phang}Michael Lokshin, mlokshin@worldbank.org

{phang}{browse "http://econ.worldbank.org/programs/poverty/toolkit"}

{phang}Development Economics Research Group

{phang}The World Bank


{title:Acknowledgments}

{pstd}
While the concept of {cmd:xml_tab} is original, we borrowed some functionality ideas from such programs as
 {helpb estout} by Ben Jann, {helpb outreg} by John Luke Gallup, {helpb outreg2} by Roy Wada,
{helpb modltbl} by John H. Tyler, {helpb mktab} by Nicholas Winter, {helpb outtex} by Antoine Terracol, and
{helpb est2tex} by Marc Muendler.


{title:Also see}

{psee}
Article:  {it:Stata Journal}, volume 8, number 3: {browse "http://www.stata-journal.com/article.html?article=dm0037":dm0037}

{psee}
Online:  {manhelp xmlsave D}, {manhelp estimates R}, {manhelp matrix P},
         {manhelp which R}{p_end}
